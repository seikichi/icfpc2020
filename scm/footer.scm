;; (use util.combinations)

;; (define (iterate ps)
;;   (if (not (null? ps))
;;       (begin
;;         (let* ((x (caar ps))
;;                (y (cadar ps))
;;                (result (_usual (_ap (_ap z0
;;                                          (_ap (_ap _cons 0) 0))
;;                                     (_ap (_ap _cons x) y)))))
;;           (if (> (car result) 0)
;;               (print (string-append "flag = " (x->string (car result))
;;                                     ", (when x = " (x->string x)
;;                                     ", y = " (x->string y) ")"
;;                                     )))
;;           (iterate (cdr ps))))))

;; (define ps (cartesian-product (list (iota 21 -10) (iota 21 -10))))

;; (iterate ps)

;; (define result (_ap (_ap z0 _nil) (_ap (_ap _cons 0) 0)))
;; (0 (0) 0 ())
;; (1 (4) 0 ())
;; (galaxy nil (?, ?)) -> flag は 0 ばっかり...
;; 返り値の newState を見ると...
;; (0 (0) 0 ())
;; 適当に (1 (11) 1 ()) とか変えると...
;;;; (1 (11 -1) 1 ()) -> big

(define (_unusual x)
  (cond ((number? x) x)
        ((eq? x #t) _t)
        ((eq? x #f) _f)
        ((null? x) _nil)
        (else (_ap (_ap _cons (_unusual (car x))) (_unusual (cdr x))))))

;; the following arguments generate non zero flag!!!
;; (define data (_unusual '(2 (1 -1) 1 ())))
;; (define point (_unusual '(0 . 0)))

;; (5 (1 0 () () () () () 0) 1 ())
;; (define data (_unusual '(5 (1 1 (1) (1) (1) (1) (1) 0 1) 10 ())))
;; (define data (_unusual '(5 (2 0 () () () () () 60506) 1 ())))
;; (define data (_unusual '(5 (1 0 () () () () () 0) 1 ())))
;; (define point (_unusual '(-71253675521 0)))

;; (define data _nil)
;; (define point (_unusual '(0 . 0)))

;; (define data (_unusual '(0 (3) 0 ())))
;; (define point (_unusual '(3 . 3)))

;; (define data (_unusual '(1 (11) 0 ())))
;; (define point (_unusual '(1 . 4)))

;; (define data (_unusual '(2 (1 -1) 0 ())))
;; (define point (_unusual '(0 . 0)))

;; (define data (_unusual '(1 (11) 0 ()))) ;; biiiiiiiiiiiiiig picture
;; (define point (_unusual '(0 . 0)))

;; --------------------------------------------------------

;; (define data (_unusual '(2 (1 -1) 1 ())))
;; (define point (_unusual '(0 . 0)))

;; (define data (_unusual '(5 (2 0 () () () () () 60506) 8 ())))
;; ;; (define data (_unusual '(5 (1 0 () () () () () 60030) 8 ())))
;; ;; (define point (_unusual '(1 60000)))
;; (define point (_unusual '(-109 . 0)))

;; ;; this is god
;; (define data (_unusual '(5 (2 0 () () () () () 60506) 8 ())))
;; (define point (_unusual '(-109 . 0)))

;; UOOOOOOOOOOOOOOO
;; (define data (_unusual
;;               '(5
;;                 (10 270608505102339400
;;                     ()
;;                     ()
;;                     ()
;;                     () (-108 . 0) 60506) 8
;;                     ())
;;               ))
;; (define point
;;   (_unusual
;;    '(1 0 3 7 ((1 1 3) (0 0 4)) ((16 128) ((0 (((1 0 (16 . -48) (0 . 0) (206 30 10 1) 0 64 1) ()) ((0 1 (-16 . 48) (0 . 0) (510 0 0 1) 0 64 1) ()))) (1 (((1 0 (15 . -48) (-1 . 0) (205 30 10 1) 0 64 1) ((0 (1 . 1)))) ((0 1 (-16 . 47) (0 . -1) (510 0 0 1) 0 64 1) ()))) (2 (((1 0 (13 . -48) (-2 . 0) (204 30 10 1) 0 64 1) ((0 (1 . 1)))) ((0 1 (-16 . 45) (0 . -2) (510 0 0 1) 0 64 1) ()))) (3 (((1 0 (10 . -47) (-3 . 1) (203 30 10 1) 0 64 1) ((0 (1 . 0)))) ((0 1 (-16 . 42) (0 . -3) (510 0 0 1) 0 64 1) ()))) (4 (((1 0 (6 . -45) (-4 . 2) (202 30 10 1) 0 64 1) ((0 (1 . 0)))) ((0 1 (-16 . 38) (0 . -4) (510 0 0 1) 0 64 1) ()))) (5 (((1 0 (2 . -42) (-4 . 3) (202 30 10 1) 0 64 1) ()) ((0 1 (-16 . 33) (0 . -5) (510 0 0 1) 0 64 1) ()))) (6 (((1 0 (-2 . -38) (-4 . 4) (202 30 10 1) 0 64 1) ()) ((0 1 (-16 . 27) (0 . -6) (510 0 0 1) 0 64 1) ()))) (7 (((1 0 (-6 . -33) (-4 . 5) (202 30 10 1) 0 64 1) ()) ((0 1 (-16 . 20) (0 . -7) (510 0 0 1) 0 64 1) ()))) (8 (((1 0 (-10 . -27) (-4 . 6) (202 30 10 1) 20 64 1) ((2 (-16 . 12) 30 25 4))) ((0 1 (-16 . 12) (0 . -8) (0 0 0 0) 0 64 1) ()))))))
;;    )
;;   )

;; (define data (_unusual ' (5
;;   (7 270608505102339400
;;    ()
;;    ()
;;    ()
;;    (1 0 3 7
;;     ((1 1 3)
;;      (0 0 4))
;;     ((16 128)
;;      ((0
;;        (((1 0 (16 . -48) (0 . 0)
;;           (206 30 10 1) 0 64 1)
;;          ())
;;         ((0 1 (-16 . 48) (0 . 0)
;;           (510 0 0 1) 0 64 1)
;;          ())))
;;       (1
;;        (((1 0 (15 . -48) (-1 . 0)
;;           (205 30 10 1) 0 64 1)
;;          ((0 (1 . 1))))
;;         ((0 1 (-16 . 47) (0 . -1)
;;           (510 0 0 1) 0 64 1)
;;          ())))
;;       (2
;;        (((1 0 (13 . -48) (-2 . 0)
;;           (204 30 10 1) 0 64 1)
;;          ((0 (1 . 1))))
;;         ((0 1 (-16 . 45) (0 . -2)
;;           (510 0 0 1) 0 64 1)
;;          ())))
;;       (3
;;        (((1 0 (10 . -47) (-3 . 1)
;;           (203 30 10 1) 0 64 1)
;;          ((0 (1 . 0))))
;;         ((0 1 (-16 . 42) (0 . -3)
;;           (510 0 0 1) 0 64 1)
;;          ())))
;;       (4
;;        (((1 0 (6 . -45) (-4 . 2)
;;           (202 30 10 1) 0 64 1)
;;          ((0 (1 . 0))))
;;         ((0 1 (-16 . 38) (0 . -4)
;;           (510 0 0 1) 0 64 1)
;;          ())))
;;       (5
;;        (((1 0 (2 . -42) (-4 . 3)
;;           (202 30 10 1) 0 64 1)
;;          ())
;;         ((0 1 (-16 . 33) (0 . -5)
;;           (510 0 0 1) 0 64 1)
;;          ())))
;;       (6
;;        (((1 0 (-2 . -38) (-4 . 4)
;;           (202 30 10 1) 0 64 1)
;;          ())
;;         ((0 1 (-16 . 27) (0 . -6)
;;           (510 0 0 1) 0 64 1)
;;          ())))
;;       (7
;;        (((1 0 (-6 . -33) (-4 . 5)
;;           (202 30 10 1) 0 64 1)
;;          ())
;;         ((0 1 (-16 . 20) (0 . -7)
;;           (510 0 0 1) 0 64 1)
;;          ())))
;;       (8
;;        (((1 0 (-10 . -27) (-4 . 6)
;;           (202 30 10 1) 20 64 1)
;;          ((2 (-16 . 12) 30 25 4)))
;;         ((0 1 (-16 . 12) (0 . -8)
;;           (0 0 0 0) 0 64 1)
;;          ())))))) (-108 . 0) 60506) 8
;;   ())
;;                          ))

;; (define point (_unusual '(-109 . 0)))

(define data (_unusual
              '(5
  (2 0
   ()
   ()
   ()
   (1 0 3 7
    ((1 1 3)
     (0 0 4))
    ((16 128)
     ((0
       (((1 0 (16 . -48) (0 . 0)
          (206 30 10 1) 0 64 1)
         ())
        ((0 1 (-16 . 48) (0 . 0)
          (510 0 0 1) 0 64 1)
         ())))
      (1
       (((1 0 (15 . -48) (-1 . 0)
          (205 30 10 1) 0 64 1)
         ((0 (1 . 1))))
        ((0 1 (-16 . 47) (0 . -1)
          (510 0 0 1) 0 64 1)
         ())))
      (2
       (((1 0 (13 . -48) (-2 . 0)
          (204 30 10 1) 0 64 1)
         ((0 (1 . 1))))
        ((0 1 (-16 . 45) (0 . -2)
          (510 0 0 1) 0 64 1)
         ())))
      (3
       (((1 0 (10 . -47) (-3 . 1)
          (203 30 10 1) 0 64 1)
         ((0 (1 . 0))))
        ((0 1 (-16 . 42) (0 . -3)
          (510 0 0 1) 0 64 1)
         ())))
      (4
       (((1 0 (6 . -45) (-4 . 2)
          (202 30 10 1) 0 64 1)
         ((0 (1 . 0))))
        ((0 1 (-16 . 38) (0 . -4)
          (510 0 0 1) 0 64 1)
         ())))
      (5
       (((1 0 (2 . -42) (-4 . 3)
          (202 30 10 1) 0 64 1)
         ())
        ((0 1 (-16 . 33) (0 . -5)
          (510 0 0 1) 0 64 1)
         ())))
      (6
       (((1 0 (-2 . -38) (-4 . 4)
          (202 30 10 1) 0 64 1)
         ())
        ((0 1 (-16 . 27) (0 . -6)
          (510 0 0 1) 0 64 1)
         ())))
      (7
       (((1 0 (-6 . -33) (-4 . 5)
          (202 30 10 1) 0 64 1)
         ())
        ((0 1 (-16 . 20) (0 . -7)
          (510 0 0 1) 0 64 1)
         ())))
      (8
       (((1 0 (-10 . -27) (-4 . 6)
          (202 30 10 1) 20 64 1)
         ((2 (-16 . 12) 30 25 4)))
        ((0 1 (-16 . 12) (0 . -8)
          (0 0 0 0) 0 64 1)
         ())))))) (-108 . 0) 60000) 8
  ())

              ))

;; (define point (_unusual '(1 60000)))
(define point (_unusual '(-109 . 0)))

;; (define data (_unusual '))

;; (define point '(-71253675521 -69073952767 -63611377529 -62144538686 -41425622328 -17782381077 0 60506))
;; (define point (_unusual '()))

;; (define data (_unusual '(5 (2 0 () () () () () 60506) 1 ())))
;; ;; (define point (_unusual '(-71253675521 . 0)))
;; (define point (_unusual '(7 . -10179096503)))

(define result (_ap (_ap z0 data) point))

(define (pretty-print-sexp s)
  (define (do-indent level)
    (dotimes (_ level) (write-char #\space)))
  (define (pp-parenl)
    (write-char #\())
  (define (pp-parenr)
    (write-char #\)))
  (define (pp-atom e prefix)
    (when prefix (write-char #\space))
    (write e))
  (define (pp-list s level prefix)
    (and prefix (do-indent level))
    (pp-parenl)
    (let loop ((s s)
               (prefix #f))
      (if (null? s)
          (pp-parenr)
          (let1 e (car s)
            (if (list? e)
                (begin (and prefix (newline))
                       (pp-list e (+ level 1) prefix))
                (pp-atom e prefix))
            (loop (cdr s) #t)))))
  (if (list? s)
      (pp-list s 0 #f)
      (write s))
  (newline))

(print (force (_ap _car result)))
;; (print (force (_ap _cadr result)))
;; (print (force (_ap _caddr result)))
(pretty-print-sexp (_usual result))

;; (print ((force z0) _nil))
;; (print (force ((force z2000) 8)))

(_multipledraw (caddr (_usual result)))
;; (print (_usual data))
;; (print (_usual point))
